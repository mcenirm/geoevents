# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Actions',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('rating_count', models.IntegerField(default=1, help_text=b'Importance Level - Number of Votes', max_length=1000)),
                ('action_id', models.CharField(help_text=b'example: A-AEG-U-0155', max_length=15)),
                ('description', models.CharField(help_text=b'High level description of action', max_length=120, null=True, blank=True)),
                ('date_assigned', models.DateTimeField(null=True, blank=True)),
                ('date_updated', models.DateTimeField(null=True, blank=True)),
                ('date_plan_due', models.DateTimeField(null=True, blank=True)),
                ('date_final_due', models.DateTimeField(null=True, blank=True)),
                ('date_closed', models.DateTimeField(null=True, blank=True)),
                ('assigned_to', models.CharField(help_text=b'Organizations Responsible', max_length=250, null=True, blank=True)),
                ('status', models.IntegerField(default=2, help_text=b'Status of Action', max_length=1, choices=[(2, b'Open'), (1, b'Pending Closed'), (0, b'Closed')])),
                ('action_notes', models.TextField(help_text=b'Detailed notes describing the result of this action, the format it should be in, and any procedural details', null=True, blank=True)),
                ('response', models.TextField(help_text=b'Detailed notes, status, comments from head office', null=True, blank=True)),
                ('current_status', models.TextField(help_text=b'Detailed status of tasker, not describing content of result', null=True, blank=True)),
                ('category', models.CharField(help_text=b"Tasker Category (e.g. 'AEG Taskers')", max_length=100, null=True, blank=True)),
                ('hotness', models.IntegerField(default=0, max_length=2, null=True, help_text=b'How Hot? 0-5', blank=True)),
                ('originator', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, max_length=250, help_text=b'Person tasking action', null=True)),
            ],
            options={
                'ordering': ['-date_final_due', '-hotness'],
                'verbose_name_plural': 'Action Items',
            },
        ),
        migrations.CreateModel(
            name='Billet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200, null=True, verbose_name=b'Billet Name', blank=True)),
                ('date_open', models.DateTimeField(null=True, verbose_name=b'Date Created', blank=True)),
                ('date_advertised', models.DateTimeField(null=True, verbose_name=b'Date Advertised', blank=True)),
                ('date_filled', models.DateTimeField(null=True, verbose_name=b'Date Filled', blank=True)),
                ('date_start', models.DateTimeField(null=True, verbose_name=b'Start Date', blank=True)),
                ('date_expires', models.DateTimeField(null=True, verbose_name=b'Expiration Date', blank=True)),
                ('date_vacant', models.DateTimeField(null=True, verbose_name=b'Vacant Date', blank=True)),
                ('date_extension', models.DateTimeField(null=True, verbose_name=b'Exention Requested Date', blank=True)),
                ('date_review', models.DateTimeField(null=True, verbose_name=b'Review Selection Packaged', blank=True)),
                ('date_selected', models.DateTimeField(null=True, verbose_name=b'Selected Date', blank=True)),
                ('dept', models.CharField(max_length=20, null=True, verbose_name=b'Department', blank=True)),
                ('org', models.CharField(max_length=20, null=True, verbose_name=b'Organization', blank=True)),
                ('status', models.IntegerField(default=0, choices=[(0, b'Open'), (1, b'Filled'), (2, b'Started'), (3, b'Closed')])),
                ('band_level', models.CharField(max_length=10, choices=[(b'gs10', b'gs10'), (b'gs11', b'gs11'), (b'gs12', b'gs12'), (b'gs13', b'gs13'), (b'gs14', b'gs14'), (b'gs15', b'gs15')])),
                ('selectee', models.CharField(max_length=80, null=True, verbose_name=b'Selectee', blank=True)),
                ('comments', models.TextField(null=True, verbose_name=b'Comments', blank=True)),
                ('aon_id', models.CharField(max_length=20, null=True, verbose_name=b'AON #', blank=True)),
                ('tags', models.CharField(max_length=75, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='DashboardWidgets',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('order', models.IntegerField(help_text=b'Order on page')),
                ('width', models.IntegerField(default=6, help_text=b'Columns: 12 is max, 6 is normal', max_length=2, choices=[(2, b'2 - Small'), (3, b'3 - Half'), (4, b'4 - Third'), (6, b'6 - Normal'), (12, b'12 - Full')])),
                ('height', models.IntegerField(default=250, help_text=b'Pixels in height', max_length=3, choices=[(65, b'65 - Tiny'), (100, b'100 - Small'), (150, b'150 - Small'), (200, b'200 - Med'), (250, b'250 - Standard'), (300, b'300 - Big'), (350, b'350 - Big'), (400, b'400 - Bigger'), (500, b'500 - Huge')])),
                ('data_json_org', models.TextField(help_text=b'JSON data when this widget is used by this organization, to be used by widget in configuration', null=True, blank=True)),
            ],
            options={
                'ordering': ['order'],
                'verbose_name_plural': 'Dashboard Widgets',
            },
        ),
        migrations.CreateModel(
            name='DirectorDashboard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('org', models.CharField(help_text=b'Organization Abbreviation, e.g. AEG', max_length=20, null=True, verbose_name=b'Organization', blank=True)),
                ('name', models.CharField(help_text=b'Organization Title', max_length=200, null=True, verbose_name=b'Title', blank=True)),
                ('site_icon', models.CharField(help_text=b'URL to Icon file, blank for none', max_length=200, null=True, verbose_name=b'Site Icon', blank=True)),
                ('status', models.IntegerField(default=1, help_text=b'Active to show on lookup list + Search', max_length=1, choices=[(1, b'Active'), (0, b'Inactive')])),
                ('type', models.CharField(default=b'Portal', help_text=b'Portal to render as dashboard page', max_length=10, choices=[(b'Portal', b'Portal'), (b'Widget', b'Widget'), (b'Page', b'Page')])),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('tags', models.CharField(help_text=b'List of comma-separated tags', max_length=75, null=True, blank=True)),
                ('tracking_code', models.CharField(help_text=b'Web Analytics Code, if blank then use site default', max_length=250, null=True, blank=True)),
                ('director_billets', models.ManyToManyField(help_text=b'Billets for this dashboard', to='director.Billet', null=True, blank=True)),
                ('owner', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, max_length=250, help_text=b'Administrative Owner', null=True)),
            ],
            options={
                'ordering': ['org'],
                'verbose_name_plural': 'Executive Dashboards',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('rating_count', models.IntegerField(default=1, help_text=b'Importance Level - Number of Votes', max_length=1000)),
                ('title', models.CharField(help_text=b'Link title (as short as possible)', unique=True, max_length=60)),
                ('category', models.CharField(default=b'Links', help_text=b'Category of Link', max_length=60, choices=[(b'Top 10 Initiatives', b'Top 10 Initiatives'), (b'Knowledge Center', b'Knowledge Center'), (b'Tools', b'Tools'), (b'Links', b'Links')])),
                ('details', models.TextField(help_text=b'Link description', null=True, blank=True)),
                ('technical_poc', models.CharField(help_text=b'Point of Contact for Technical Issues', max_length=200, null=True, blank=True)),
                ('url', models.TextField(help_text=b'Link to another page when clicked', null=True, blank=True)),
                ('color', models.CharField(help_text=b'Background color to show behind link, blank for default', max_length=60, null=True, blank=True)),
                ('icon', models.CharField(help_text=b'Glyph Icon name to show with link, blank for none', max_length=20, null=True, blank=True)),
            ],
            options={
                'ordering': ['category', 'rating_count', 'title'],
                'abstract': False,
                'verbose_name_plural': 'Links',
            },
        ),
        migrations.CreateModel(
            name='PageWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(help_text=b'Widget short name', unique=True, max_length=200)),
                ('description', models.TextField(help_text=b'Widget details', null=True, blank=True)),
                ('subtext', models.CharField(default=b'', max_length=30, null=True, help_text=b'Short text under title', blank=True)),
                ('url', models.TextField(help_text=b'Link to another page when title is clicked', null=True, blank=True)),
                ('type', models.CharField(default=b'Wiki', help_text=b'How to render widget', max_length=10, choices=[(b'Wiki', b'Wiki - Show content in Notes'), (b'iFrame', b'iFrame - load from Url'), (b'Widget', b'Widget - created by Function')])),
                ('theme', models.CharField(default=b'Thick', help_text=b'Theme of widget', max_length=15, choices=[(b'Headless', b'Headless'), (b'Thin', b'Thin'), (b'Thick', b'Thick'), (b'Thick+Border', b'Thick+Border')])),
                ('data_json', models.TextField(help_text=b'JSON data to be used by widget in configuration', null=True, blank=True)),
                ('render_function', models.CharField(default=b'notesAndChildNotes', help_text=b'JavaScript function to use when populating widget', max_length=60)),
                ('icon', models.CharField(default=b'', help_text=b'Icon Glyph', max_length=20, choices=[(b'search', b'search'), (b'globe', b'globe'), (b'envelope', b'envelope'), (b'star', b'star'), (b'star-empty', b'star-empty'), (b'th-large', b'th-large'), (b'th', b'th'), (b'th-list', b'th-list'), (b'ok', b'ok'), (b'zoom-in', b'zoom-in'), (b'zoom-out', b'zoom-out'), (b'off', b'off'), (b'cog', b'cog'), (b'trash', b'trash'), (b'time', b'time'), (b'inbox', b'inbox'), (b'fire', b'fire'), (b'share', b'share'), (b'move', b'move'), (b'bookmark', b'bookmark'), (b'picture', b'picture'), (b'warning-sign', b'warning-sign'), (b'asterisk', b'asterisk'), (b'bullhorn', b'bullhorn')])),
                ('iframe_url', models.TextField(help_text=b'If widget should show as a faux widget in an iframe, URL to the page', null=True, blank=True)),
                ('iframe_url_if_local', models.TextField(help_text=b'faux url to use if testing as localhost', null=True, blank=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Page Widgets',
            },
        ),
        migrations.CreateModel(
            name='ProgramGroup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(help_text=b'Organization Title', max_length=200, null=True, verbose_name=b'Title', blank=True)),
                ('details', models.TextField(help_text=b'Link description', null=True, blank=True)),
                ('url', models.TextField(help_text=b'Link to another page when clicked', null=True, blank=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('tags', models.CharField(help_text=b'List of comma-separated tags', max_length=75, null=True, blank=True)),
                ('related_links', models.ManyToManyField(help_text=b'Related Links', to='director.Link', null=True, blank=True)),
            ],
            options={
                'ordering': ['name', 'tags'],
                'abstract': False,
                'verbose_name_plural': 'Program Management Groups (IPTs)',
            },
        ),
        migrations.CreateModel(
            name='ProgramInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(help_text=b'Program name', unique=True, max_length=200)),
                ('details', models.TextField(help_text=b'Program details', null=True, blank=True)),
                ('government_pm', models.CharField(help_text=b'Govt Point of Contact for Management Issues', max_length=200, null=True, blank=True)),
                ('government_cor', models.CharField(help_text=b'Point of Contact for Technical Issues', max_length=200, null=True, blank=True)),
                ('government_cotr', models.CharField(help_text=b'Point of Contact for Technical Issues', max_length=200, null=True, blank=True)),
                ('contractor', models.CharField(help_text=b'Point of Contact for Technical Issues', max_length=200, null=True, blank=True)),
                ('contract_type', models.CharField(help_text=b'Point of Contact for Technical Issues', max_length=200, null=True, blank=True)),
                ('period_of_performance', models.CharField(help_text=b'Point of Contact for Technical Issues', max_length=200, null=True, blank=True)),
                ('url', models.TextField(help_text=b'Link to another page when title is clicked', null=True, blank=True)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
                'verbose_name_plural': 'Programs of Record',
            },
        ),
        migrations.CreateModel(
            name='ProgramObservation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('rating_count', models.IntegerField(default=1, help_text=b'Importance Level - Number of Votes', max_length=1000)),
                ('observation_entered', models.DateTimeField(auto_now=True, null=True)),
                ('classification', models.CharField(default=b'Public Releasable', help_text=b'Classification', max_length=20)),
                ('pm_observation', models.TextField(help_text=b'Program Manager Assessment', null=True, blank=True)),
                ('metric_overall', models.CharField(default=b'Yellow', help_text=b'Current status', max_length=10, choices=[(b'Green', b'Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')])),
                ('trend_overall', models.CharField(default=b'Middle', help_text=b'Current trend', max_length=10, choices=[(b'Up', b'Increasing'), (b'Middle', b'Stable'), (b'Down', b'Decreasing')])),
                ('summary_overall', models.TextField(help_text=b'Current summary', null=True, blank=True)),
                ('metric_cost', models.CharField(default=b'Yellow', help_text=b'Current status', max_length=10, choices=[(b'Green', b'Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')])),
                ('trend_cost', models.CharField(default=b'Middle', help_text=b'Current trend', max_length=10, choices=[(b'Up', b'Increasing'), (b'Middle', b'Stable'), (b'Down', b'Decreasing')])),
                ('summary_cost', models.TextField(help_text=b'Current summary', null=True, blank=True)),
                ('budget_cost', models.TextField(help_text=b'Budget', max_length=40, null=True, blank=True)),
                ('execution_cost', models.TextField(help_text=b'Execution', max_length=40, null=True, blank=True)),
                ('funds_cost', models.TextField(help_text=b'Funds', max_length=40, null=True, blank=True)),
                ('metric_schedule', models.CharField(default=b'Yellow', help_text=b'Current status', max_length=10, choices=[(b'Green', b'Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')])),
                ('trend_schedule', models.CharField(default=b'Middle', help_text=b'Current trend', max_length=10, choices=[(b'Up', b'Increasing'), (b'Middle', b'Stable'), (b'Down', b'Decreasing')])),
                ('summary_schedule', models.TextField(help_text=b'Current summary', null=True, blank=True)),
                ('metric_performance', models.CharField(default=b'Yellow', help_text=b'Current status', max_length=10, choices=[(b'Green', b'Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')])),
                ('trend_performance', models.CharField(default=b'Middle', help_text=b'Current trend', max_length=10, choices=[(b'Up', b'Increasing'), (b'Middle', b'Stable'), (b'Down', b'Decreasing')])),
                ('summary_performance', models.TextField(help_text=b'Current summary', null=True, blank=True)),
                ('issues_performance', models.TextField(help_text=b'Current issues', null=True, blank=True)),
                ('risk_performance', models.TextField(help_text=b'Current risks', null=True, blank=True)),
                ('entered_by', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, max_length=250, help_text=b'Observation Entered by', null=True)),
                ('program', models.ForeignKey(to='director.ProgramInfo')),
            ],
            options={
                'ordering': ['-observation_entered'],
                'verbose_name_plural': 'Programs of Record Observations',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'Date Created')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('rating_count', models.IntegerField(default=1, help_text=b'Importance Level - Number of Votes', max_length=1000)),
                ('title', models.CharField(max_length=255)),
                ('details', models.TextField(help_text=b'Program details', null=True, blank=True)),
                ('tags', models.CharField(help_text=b'List of comma-separated tags', max_length=75, null=True, blank=True)),
                ('public', models.BooleanField(default=True, help_text=b'Allow everyone to read this?')),
                ('owner', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, max_length=250, help_text=b'Person entering report', null=True)),
                ('related_actions', models.ManyToManyField(help_text=b'Related Actions', to='director.Actions', null=True, blank=True)),
                ('related_boards', models.ManyToManyField(help_text=b'Related Boards', to='director.DirectorDashboard', null=True, blank=True)),
                ('related_links', models.ManyToManyField(help_text=b'Related Links', to='director.Link', null=True, blank=True)),
                ('related_programs', models.ManyToManyField(help_text=b'Related Programs', to='director.ProgramInfo', null=True, blank=True)),
            ],
            options={
                'ordering': ['-created'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='programgroup',
            name='related_programs',
            field=models.ManyToManyField(help_text=b'Programs within the group', to='director.ProgramInfo', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='directordashboard',
            name='page_widgets',
            field=models.ManyToManyField(to='director.PageWidget', through='director.DashboardWidgets', blank=True, help_text=b'List all sections of page that should show', null=True, verbose_name=b'pagewidgets'),
        ),
        migrations.AddField(
            model_name='directordashboard',
            name='related_links',
            field=models.ManyToManyField(help_text=b'Related Links', to='director.Link', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='directordashboard',
            name='related_program_groups',
            field=models.ManyToManyField(help_text=b'Related Programs', to='director.ProgramGroup', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='dashboardwidgets',
            name='dashboard',
            field=models.ForeignKey(to='director.DirectorDashboard'),
        ),
        migrations.AddField(
            model_name='dashboardwidgets',
            name='widget',
            field=models.ForeignKey(to='director.PageWidget'),
        ),
        migrations.AddField(
            model_name='actions',
            name='owning_organization',
            field=models.ForeignKey(blank=True, to='director.DirectorDashboard', help_text=b'Primary organization this is being tracked under', null=True),
        ),
    ]
